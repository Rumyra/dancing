<!DOCTYPE html>
<html>
<head>
  <style>
    body {font-family: 'helvetica neue', helvetica, arial, sans-serif;}
    .lights {
      overflow:auto;
      width:96%;
      padding:2%;
      background-color:black;
      text-align:center;
    }
    h2 {
      font-size:1.6em;
      font-weight:normal;
      color:hsla(160, 80%, 55%, 1);
    }
    i {
      display:inline-block; margin:2.4%;
      width:40px; height:40px;
      background-color:hsla(0, 80%, 50%, 0);
      border:20px solid hsla(0, 80%, 50%, 0);
      border-radius:40px;
      opacity:0.2;
    }
  </style>
</head>

<body>
  <section class="lights">
    <h2>Allow Mic & Make Some Noise!</h2>
    
  </section>
</body>

<script type="text/javascript">

// create instance of audio api and browser check
var contextClass = (window.AudioContext || window.webkitAudioContext);
if (contextClass) {
  // Web Audio API is available.
  var context = new contextClass();
  console.warn('yes!');
} else {
  // Web Audio API is not available. Ask the user to use a supported browser.
  alert("Oh nos! It appears your browser does not support the Web Audio API, please upgrade or use a different browser");
  console.warn('poobags');
}


// make distortion---------------------------------------------
var distortion = context.createWaveShaper();

function makeDistortionCurve(amount) {
  var k = typeof amount === 'number' ? amount : 50,
    n_samples = 44100,
    curve = new Float32Array(n_samples),
    deg = Math.PI / 180,
    i = 0,
    x;
  for ( ; i < n_samples; ++i ) {
    x = i * 2 / n_samples - 1;
    curve[i] = ( 3 + k ) * x * 20 * deg / ( Math.PI + k * Math.abs(x) );
  }
  return curve;
};

distortion.curve = makeDistortionCurve(400);
distortion.oversample = '4x';

//get mic in
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
navigator.getUserMedia(
  {audio:true},
  gotStream,
  function(err) {
    console.log("The following error occured: " + err);
  } 
);

// success callback when requesting audio input stream
function gotStream(stream) {
    // Create an AudioNode from the stream.
    var mediaStreamSource = context.createMediaStreamSource(stream);
    connectDistortion(mediaStreamSource)
}


function connectDistortion(source) {
  //connect to source
  source.connect(distortion);
  distortion.connect(context.destination);
}



</script>
</html>